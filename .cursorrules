# KillTheNoise Backend - Enterprise Coding Standards
# Enforces strict architectural patterns and code quality standards

## FILE STRUCTURE & ORGANIZATION

### File Size Limits
- **Maximum file length: 200 lines**
- **Maximum function length: 50 lines**
- **Maximum class length: 150 lines**
- Split large files into smaller, focused modules

### Directory Structure
```
app/
├── api/           # API endpoints (max 200 lines per file)
├── models/        # Database models (max 200 lines per file)
├── schemas/       # Pydantic schemas (max 200 lines per file)
├── services/      # Business logic (max 200 lines per file)
├── db.py          # Database configuration
└── main.py        # Application entry point
```

## CODE QUALITY STANDARDS

### Python Style Guide
- Follow PEP 8 strictly
- Use type hints for all functions and variables
- Use `from __future__ import annotations` in all files
- Maximum line length: 88 characters (Black default)
- Use f-strings for string formatting
- Use `is` for identity comparisons, `==` for equality

### Function Design
- **Maximum function length: 50 lines**
- Single responsibility principle
- Descriptive function names (verb_noun format)
- Maximum 5 parameters per function
- Use dataclasses or Pydantic models for complex data structures

### Class Design
- **Maximum class length: 150 lines**
- Single responsibility principle
- Use composition over inheritance
- Implement `__repr__` and `__str__` methods
- Use `@dataclass` or `@pydantic.BaseModel` for data classes

### Error Handling
- Use specific exception types
- Log errors with appropriate levels
- Return meaningful error messages
- Use context managers for resource management

## ARCHITECTURAL PATTERNS

### Service Layer Pattern
```python
# ✅ Good: Service with clear separation
class UserService:
    def __init__(self, db_session: AsyncSession):
        self.db = db_session
    
    async def create_user(self, user_data: UserCreate) -> User:
        # Business logic here (max 50 lines)
        pass

# ❌ Bad: Business logic in API layer
@router.post("/users")
async def create_user(user_data: dict):
    # Don't put business logic here
    pass
```

### Repository Pattern
```python
# ✅ Good: Repository for data access
class UserRepository:
    def __init__(self, session: AsyncSession):
        self.session = session
    
    async def find_by_id(self, user_id: UUID) -> Optional[User]:
        # Data access logic here (max 50 lines)
        pass
```

### Dependency Injection
```python
# ✅ Good: Use FastAPI dependency injection
async def get_user_service() -> UserService:
    session = await get_db()
    return UserService(session)

@router.get("/users/{user_id}")
async def get_user(
    user_id: UUID,
    user_service: UserService = Depends(get_user_service)
):
    return await user_service.get_user(user_id)
```

## DATABASE STANDARDS

### Model Design
- Use SQLAlchemy declarative base
- Include `__tablename__` for all models
- Use appropriate column types and constraints
- Add indexes for frequently queried columns
- Include audit fields (created_at, updated_at)

### Migration Strategy
- Use Alembic for database migrations
- Version control all schema changes
- Test migrations on staging before production
- Include rollback strategies

## API DESIGN STANDARDS

### RESTful Endpoints
- Use proper HTTP methods (GET, POST, PUT, DELETE)
- Return appropriate HTTP status codes
- Use consistent URL patterns
- Implement proper pagination for list endpoints

### Response Format
```python
# ✅ Good: Consistent response format
{
    "success": True,
    "data": {...},
    "message": "Operation completed successfully"
}

# ❌ Bad: Inconsistent responses
{
    "result": {...},
    "status": "ok"
}
```

### Validation
- Use Pydantic for request/response validation
- Implement comprehensive input validation
- Return detailed error messages for validation failures

## ASYNC PROGRAMMING STANDARDS

### Async/Await Patterns
- Use `async def` for all I/O operations
- Use `await` for all async calls
- Don't mix sync and async code
- Use `asyncio.gather()` for concurrent operations

### Database Operations
- Use async SQLAlchemy
- Implement proper connection pooling
- Use transactions for multi-step operations
- Handle database errors gracefully

## TESTING STANDARDS

### Test Structure
- Unit tests for all business logic
- Integration tests for API endpoints
- Use pytest for testing framework
- Mock external dependencies

### Test Naming
```python
# ✅ Good: Descriptive test names
def test_create_user_with_valid_data_returns_user():
    pass

def test_create_user_with_invalid_email_raises_validation_error():
    pass
```

## SECURITY STANDARDS

### Authentication & Authorization
- Implement proper JWT token handling
- Use role-based access control (RBAC)
- Validate all user inputs
- Implement rate limiting

### Data Protection
- Encrypt sensitive data at rest
- Use HTTPS for all communications
- Implement proper session management
- Log security events

## PERFORMANCE STANDARDS

### Database Optimization
- Use database indexes appropriately
- Implement query optimization
- Use connection pooling
- Monitor query performance

### Caching Strategy
- Implement Redis for caching
- Cache frequently accessed data
- Use appropriate cache invalidation
- Monitor cache hit rates

## LOGGING STANDARDS

### Log Levels
- ERROR: System errors that need immediate attention
- WARN: Unexpected situations that don't break functionality
- INFO: General application flow
- DEBUG: Detailed information for debugging

### Log Format
```python
# ✅ Good: Structured logging
logger.info("User created", extra={
    "user_id": str(user.id),
    "email": user.email,
    "tenant_id": str(user.tenant_id)
})
```

## MONITORING & OBSERVABILITY

### Metrics
- Track API response times
- Monitor database query performance
- Track error rates
- Monitor resource usage

### Health Checks
- Implement `/health` endpoint
- Check database connectivity
- Monitor external service dependencies
- Track application uptime

## DEPLOYMENT STANDARDS

### Environment Configuration
- Use environment variables for configuration
- Implement different configs for dev/staging/prod
- Use secrets management for sensitive data
- Implement proper logging configuration

### Container Standards
- Use multi-stage Docker builds
- Implement health checks in containers
- Use appropriate base images
- Implement proper resource limits

## CODE REVIEW CHECKLIST

### Before Submitting
- [ ] Code follows PEP 8
- [ ] All functions under 50 lines
- [ ] All files under 200 lines
- [ ] Type hints included
- [ ] Tests written and passing
- [ ] Documentation updated
- [ ] No hardcoded values
- [ ] Error handling implemented
- [ ] Logging added where appropriate

### Review Criteria
- [ ] Architecture patterns followed
- [ ] Security considerations addressed
- [ ] Performance implications considered
- [ ] Error handling comprehensive
- [ ] Code is maintainable and readable
- [ ] Tests cover edge cases
- [ ] Documentation is clear and complete

## ENFORCEMENT

### Automated Checks
- Use pre-commit hooks for code formatting
- Implement CI/CD pipeline with quality gates
- Use static analysis tools (mypy, flake8)
- Automate dependency vulnerability scanning

### Manual Reviews
- All code changes require peer review
- Architecture changes require senior developer review
- Security-related changes require security team review
- Performance-critical changes require performance review

## EXCEPTIONS

### When to Break Rules
- Complex business logic that cannot be simplified
- Third-party integrations with specific requirements
- Performance-critical code that requires optimization
- Legacy code migration (temporary exceptions)

### Documentation Required
- Justify any exceptions in code comments
- Document architectural decisions (ADRs)
- Update team on any rule changes
- Maintain exception tracking and review process 